package lambda.chat.chatviz;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import java.io.ByteArrayInputStream;
import java.io.StringWriter;
public final class MistralConnection {

    private String text;
    private ArrayList<Object> embedding;

    public MistralConnection(String text) {
        this.text = text;
    }
    public MistralConnection(ArrayList<Object> embedding) {
        this.embedding = embedding;
    }
    
    private String prompt() {
        return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n" +
               "<Rules>\n" +
               "    <Goals>\n" +
               "        The principal goal is to search in the database for the best correspondence of indicators (Sales, Conversions, and many others) for business teams that lack knowledge in the data area. Therefore, we need to create a funnel with user inputs to find the best result.\n" +
               "    </Goals>\n" +
               "    <Essentials>\n" +
               "        You must follow these rules strictly. Never change the return format. You need to act like a human, so be natural.\n" +
               "    </Essentials>\n" +
               "    <LanguageSettings>\n" +
               "        If the text is in English, translate it to Portuguese. If you return a client response, you can use the same language as the user's input.\n" +
               "    </LanguageSettings>\n" +
               "    <TextComprehension>\n" +
               "        Extract as much information as possible from the user to enable a more targeted search. When you have sufficient information, create a perfect text for search. This text will undergo a series of treatments and embeddings. There will be cases where the user needs to be more specific about the subject, so ask as many questions as necessary.\n" +
               "    </TextComprehension>\n" +
               "    <ReturnRules>\n" +
               "        There will be two types of returns: the customer return, from which we will obtain more information from the user, and the return in which you will generate a prompt for performing a semantic search in the database. You will only generate the second return when you have important information to proceed. Aim for a simple and information-rich prompt.\n" +
               "    </ReturnRules>\n" +
               "    <ReturnFormat>\n" +
               "        So we will have two returns; consider returning only what is inside the keys:\n" +
               "        {\"client\":\"AskText\"}\n" +
               "        {\"system_search\":\"PromptText\"}\n" +
               "    </ReturnFormat>\n" +
               "</Rules>";
    }


    public String addPrompt(String promptText) throws Exception {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        
        Document doc;
        try {
            doc = dBuilder.parse(new ByteArrayInputStream(prompt().getBytes()));
            doc.getDocumentElement().normalize();
        } catch (Exception e) {
            throw new Exception("Erro ao carregar o documento XML: " + e.getMessage());
        }

        Element newPrompt = doc.createElement("prompt");
        newPrompt.setTextContent(promptText); 
        doc.getDocumentElement().appendChild(newPrompt);
        
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");

        StringWriter writer = new StringWriter();
        StreamResult result = new StreamResult(writer);
        DOMSource source = new DOMSource(doc);
        transformer.transform(source, result);

        String safePromptText = writer.toString().trim().replaceAll("[\\r\\n]+", "").replace("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", "").replaceAll("[ ]+", " ");
        
        return safePromptText;
    }
    
    public String taskEvaluation() throws Exception {
        String url = "https://api.mistral.ai/v1/chat/completions";
        
        HttpClient client = HttpClient.newHttpClient();
        
        String requestBody = "{\n" +
                "    \"model\": \"mistral-large-latest\",\n" +
                "    \"messages\": [{\"role\": \"user\", \"content\": \"" + addPrompt(this.text) + "\"}]\n" +
                "}";

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Content-Type", "application/json")
                .header("Accept", "application/json")
                .header("Authorization", "Bearer j06isnvg1AsoVlZKQw5tolrsMtULddZA")
                .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() == 200) {
            JsonElement jsonResponse = JsonParser.parseString(response.body());
            JsonObject jsonObject = jsonResponse.getAsJsonObject();
            String message = jsonObject.getAsJsonArray("choices")
                                       .get(0)
                                       .getAsJsonObject()
                                       .getAsJsonObject("message")
                                       .get("content")
                                       .getAsString();
            return message;
        } else {
            return "Nao foi possivel conversar com o Tersk " + response.statusCode();
        }
    }
    
}
